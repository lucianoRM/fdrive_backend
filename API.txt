Corriendo localmente al host, la dirección del server es: localhost:8000.

En caso de error, la respuesta siempre es { "result" : false , "errors" : ["<Error Message>"] }

ADD USER:
	url: <dirección server>/users?email=<email>&password=<password>
	Método: GET
	Body:
	Respuesta: En caso de no existir ya un usuario con ese mail se recibe { "result" : true } .


LOGIN:
	url: <dirección server>/login?email=<email>&password=<password>
	Método: GET
	Body:
	Respuesta: En caso de no existir el email, se recibe un mensaje de error.
			En caso satisfactorio se recibe un token para que el usuario pueda operar:
				{ "result" : true , "token" : "<token>" }

GET USERS:
	url: <dirección server>/login?email=<email>&token=<token>
	Método: GET
	Body:
	Respuesta: Si no hay problemas con la base de datos, siempre se supone exitoso.
			   Devuelve todos los users que hay sin contar a quien hizo la request:
			     { "result" : true , "users" : [
													{ "email" : <email>,
													  "password" : <password>,
													  "totalQuota" : <totalQuota>,
													  "freeQuota" : <freeQuota>,
													  "tokens" : [ {"token" : <token>, "expiration" : <expiration>} , ... ],
				(opcional - sólo si lo tiene)		  "name" : <name>,
				(opcional - sólo si lo tiene)		  "lastLocation" : <location>,
				(opcional - sólo si lo tiene)		  "pathToProfilePicture" : <path>
													} ,
													...
											   ]
			     }

SAVE FILE: Para NEW files (the user sending it will be the owner)
	url: <dirección server>/files
	Método: POST
	Body: {
		“email”:”<email>”,
		“token”:”<token>”,
		“name”:”<name>”,
		“extension”:”<extension>”,
		"path":"<path>",
		“tags”:[<tag1>, <tag2>, ...]
	}
	Respuesta: En caso de que todos los campos sean correctos, { "result" : true , "fileID" : <id> }.

SAVE FILE: Para OLD files (the user sending it will be creating a new version)
	url: <dirección server>/files
	Método: POST
	Body: {
		“email”:”<email>”,
		“token”:”<token>”,
		“name”:”<name>”,
		“extension”:”<extension>”,
		"id":<id>,
		“tags”:[<tag1>, <tag2>, ...]
	}
	Respuesta: En caso de que todos los campos sean correctos y el usuario tenga permisos para acceder al archivo, { "result" : true }.

LOAD FILE:
	url: <dirección server>/files?email=<email>&token=<token>&id=<id>
	Método: GET
	Body:
	Respuesta: En caso de que el token sea correcto,
	    {
    		"extension" : "<extension>",
            "id" : <id>,
            "lastModified" : "<timestamp>",    // Format: Thu Oct 22 03:24:19 2015
            "lastUser" : "<user>",
            "name" : "<file1>",
            "owner" : "<owner>",
            "tags" : [ "<tag1>", "<tag2>", ... ]
    	}

GET USER'S FILES:
    url: <dirección server>/userfiles?email=<email>&token=<token>
    Método: GET
    Body:
	Respuesta:
		{ "result" : true ,
		  "files" : [
				{ "folderPath" : "<path1>" ,
				  "files" : [
						{
						   "extension" : "<extension>",
						   "id" : <id>,
						   "lastModified" : "<timestamp>",    // Format: Thu Oct 22 03:24:19 2015
						   "lastUser" : "<user>",
						   "name" : "<file1>",
						   "owner" : "<owner>",
						   "tags" : [ "<tag1>", "<tag2>", ... ]
						} ,
						{
						   "extension" : "<extension>",
                           "id" : <id>,
                           "lastModified" : "<timestamp>",
                           "lastUser" : "<user>",
						   "name" : "<file2>",
						   "owner" : "<owner>",
                           "tags" : [ "<tag1>", "<tag2>", ... ]
						} ,
						...
				  ]
				} ,
				...
          ]
        }


ERASE FILE:
	url: <dirección server>/files?email=<email>&token=<token>&path=<path>&id=<id>
	Método: DELETE
	
	Respuesta: En caso de que el token sea correcto y corresponda al email, se elimina el archivo y se recibe 
	
	un mensaje de success con el id del archivo borrado.


SHARE FILE:
	url: <dirección server>/share
	Método: POST
	Body:{
		“email”:”<email>”,
		“token”:”<token>”,
		“id”:”<id>”,
		"users" : [ <email1>, <email2>, ...]
		}
	Respuesta: Si el que lo pide es el dueño, y todos tienen la cuota necesaria, hay éxito y se devuelve:
				{ "result" : true }
			   En el caso de que alguno no tenga la cuota necesaria, no se le agregará a ninguna y 
				  en el mensaje se indicará qué usuario no tenía lugar:
				{ "result" : false , "errors" : ["The user <email> doesn't have enough space in the account."] }


UPLOAD FILE:
	url: <dirección server>/filesupload?email=<email>&token=<token>
	Método: POST
	Multipart
	Body:{
		"upload":<data>
	}
	Respuesta: {"result": true}

ADD FOLDER:
	url: <dirección server>/addfolder?email=<email>&token=<token>&path=<path>&name=<name>
	Método: POST
	Respuesta: {"result": true}
